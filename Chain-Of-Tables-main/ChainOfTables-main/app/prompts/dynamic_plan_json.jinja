Given a set of operations and their instructions, a table of information, and a question, you are required to devise a plan (as a JSON object) consisting of a sequence of the provided operations to address the question. Your plan must only contain operations from the available operations list, and the plan must always end with the <END> operation.

Your output must be a valid JSON object with the following structure:
{
  "chain": [
    {
      "action": "<operation_name>",
      "args": { "key": "value" }
    },
    {
      "action": "<operation_name>",
      "args": { "key": "value" }
    }
  ]
}

The available operations are:

1. f_select_table
   Description: When working with multiple tables, selects the most relevant tables needed to answer the question.
   Example:
   Available tables:
   - population_data: Contains population information
   - gdp_data: Contains GDP information
   - export_data: Contains export data
   Question: What is the GDP per capita of Japan?
   Function call example:
   {
     "action": "f_select_table",
     "args": { "tables": ["population_data", "gdp_data"] }
   }
   Explanation: The question asks about GDP per capita, which requires both population and GDP data, so we select these two tables.

2. f_normalize_column
   Description: Standardizes column names across tables to align similar columns for joining.
   Example:
   Available tables:
   - population_table: Has a "Nation" column
   - economic_table: Has a "Country Name" column
   Question: Compare GDP and population of Japan.
   Function call example:
   {
     "action": "f_normalize_column",
     "args": { 
       "target_name": "Country", 
       "mappings": [
         {"table_name": "population_table", "column_name": "Nation"},
         {"table_name": "economic_table", "column_name": "Country Name"}
       ]
     }
   }
   Explanation: We standardize the country columns to have the same name for joining.

3. f_join_tables
   Description: Combines data from two tables based on a common key column.
   Example:
   Available tables:
   - population_data: Has "Country" and "Population" columns
   - gdp_data: Has "Country" and "GDP" columns
   Question: What is the GDP per capita for each country?
   Function call example:
   {
     "action": "f_join_tables",
     "args": {
       "table1": "population_data",
       "table2": "gdp_data",
       "join_column": "Country",
       "result_table_name": "combined_data"
     }
   }
   Explanation: We join population and GDP data on the Country column to create a combined table.

4. f_select_column  
   Description: If the table only needs a few columns to answer the question, we use f_select_column() to select these columns.
   Example:  
   Table:
   /*
   ,Home Team,Home Team Score,Away Team,Away Team Score,Venue,Crowd
   0,St Kilda,13.12 (90),Melbourne,13.11 (89),Moorabbin Oval,18836
   1,South Melbourne,9.12 (66),Footscray,11.13 (79),Lake Oval,9154
   2,Richmond,20.17 (137),Fitzroy,13.22 (100),MCG,27651
   */
   Question: What are the venues and crowds for each game?
   Function call example:
   {
     "action": "f_select_column",
     "args": { "columns": ["Venue", "Crowd"] }
   }
   Explanation: The question asks for information about the venues and the crowds for each game. We select the "Venue" and "Crowd" columns.

5. f_select_row  
   Description: If the table only needs a few rows to answer the question, we use f_select_row() to select these rows.
   Example:  
   Table:
   /*
   ,Home Team,Home Team Score,Away Team,Away Team Score,Venue,Crowd
   0,St Kilda,13.12 (90),Melbourne,13.11 (89),Moorabbin Oval,18836
   1,South Melbourne,9.12 (66),Footscray,11.13 (79),Lake Oval,9154
   2,Richmond,20.17 (137),Fitzroy,13.22 (100),MCG,27651
   */
   Question: Whose home team score is higher, Richmond or St Kilda?
   Function call example:
   {
     "action": "f_select_row",
     "args": { "rows": [0, 2] }
   }
   Explanation: We select rows 0 and 2 to compare the home team scores of Richmond and St Kilda.

6. f_add_column  
   Description: If the table does not have the needed column to answer the question, we use f_add_column() to add a new column.
   Example:  
   Table:
   /*
   ,rank,lane,player,time
   0,,5,olga tereshkova (kaz),51.86
   1,,6,manjeet kaur (ind),52.17
   2,,3,asami tanno (jpn),53.04
   */
   Question: How many athletes are from Japan?
   Function call example:
   {
     "action": "f_add_column",
     "args": { "column_name": "country of athlete", "values": ["kaz", "ind", "jpn"] }
   }
   Explanation: Since there is no column for the country of athletes, we add a column "country of athlete" with a value for each row.

7. f_sort_by  
   Description: If the question asks about the order of items in a column, we use f_sort_by() to sort the items.
   Example:  
   Table:
   /*
   ,position,club,played,points
   0,1,malaga cf,42,79
   1,10,cp merida,42,59
   2,3,cd numancia,42,73
   */
   Question: In which position did CD Numancia finish?
   Function call example:
   {
     "action": "f_sort_by",
     "args": { "column": "position", "order": "ascending" }
   }
   Explanation: We sort the rows by the "position" column in ascending order to determine the finishing position.

8. f_group_by  
   Description: If the question asks about items with the same value and the number of these items, we use f_group_by() to group the items.
   Example:  
   Table:
   /*
   ,district,name,party,residence,first served
   0,district 1,nelson albano,dem,vineland,2006
   1,district 1,robert andrzejczak,dem,middle twp.,2013
   2,district 2,john f. amodeo,rep,margate,2008
   */
   Question: How many districts are democratic?
   Function call example:
   {
     "action": "f_group_by",
     "args": { "columns": ["party"] }
   }
   Explanation: We group the rows by the "party" column to count the number of democratic districts.

9. <END>  
   Description: The terminal operation indicating the end of the plan.
   Example:
   {
     "action": "<END>",
     "args": {}
   }

Below are example plans expressed in JSON:

Example 1 (Multi-table):
{
  "chain": [
    { "action": "f_select_table", "args": { "tables": ["population_data", "gdp_data"] } },
    { "action": "f_normalize_column", "args": { 
        "target_name": "Country", 
        "mappings": [
          {"table_name": "gdp_data", "column_name": "Nation"}
        ]
      } 
    },
    { "action": "f_join_tables", "args": { 
        "table1": "population_data", 
        "table2": "gdp_data", 
        "join_column": "Country", 
        "result_table_name": "combined_data" 
      } 
    },
    { "action": "f_select_column", "args": { "columns": ["Country", "Population", "GDP"] } },
    { "action": "<END>", "args": {} }
  ]
}

Example 2 (Single table):
{
  "chain": [
    { "action": "f_add_column", "args": { "column_name": "country of athletes", "values": ["kaz", "ind", "jpn"] } },
    { "action": "f_select_row", "args": { "rows": [1, 3] } },
    { "action": "f_select_column", "args": { "columns": ["athlete", "country of athletes"] } },
    { "action": "f_group_by", "args": { "columns": ["country of athletes"] } },
    { "action": "<END>", "args": {} }
  ]
}

Now, using the table and question provided below, output a valid JSON object representing the function chain according to the above schema. Do not include any additional text.

The table is as follows:
\*
{{ table }}*/
Question: {{ question }} {{ possible_next_operations_prompt }}
Function Chain: {{ chain }}